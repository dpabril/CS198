CS 198/199 Implementation Tasks

Application:
  CS 198:
    ☐ QR Code Method
      * Scanning QR codes instead of images solves the issue of unreliability thanks to varying lighting conditions
      * This is also a good solution for relocalization by placing QR codes in the areas covered by the application

      ☐ QR Code Scanner
        ✔ Basic QR scanning functionality @done (18-12-06 16:36)
        ✔ Set minimum distance to QR code (arm's length) @done (18-12-07 14:29)
        ☐ Detect codes that do not exist in the database, and display informative message @high
          * Prevents application from crashing when fed irrelevant QR codes
        ☐ Keep QR code in center of screen @low
          * This is to keep the user at the desired distance from the QR code image
      ☐ Print QR codes for testing

    ☐ SQLite Database
     _Stores:_
      * QR code information
      * Location information
        * Building
          * Floor
          * Relative altitude range, with 0.0 as lowest relevant floor
          * Corresponding image
          * <?> User rotation offset
          * Rooms
            * Scene coordinates of location pin marker
      ✔ Design the schema @done (18-12-07 14:28)
      ☐ Create a Swift class for static query functions to the DB
    ☐ Navigation View
      * Change plane size and material depending on most recently scanned location + relative altitude reading
      ☐ Program scene adjustments
        * Refers to translation of location and user markers
      ☐ Refine filter and movement vector calculation
        * Create a Filter class, with mirror, low-pass, and high-pass options
      ☐ Replace ARKit with plain SceneKit
    ☐ Indoor Location List View
      ☐ Build query function for acquiring the list
      ☐ Bind table cells to rows in the database

  CS 199:
    ☐ Outdoor Nav Subfunction
      ☐ Integrate into app using MapKit
Paper:
  ☐ Write the paper, bois
    ☐ Include cool af diagram for data flow / high-level concept
